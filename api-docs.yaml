openapi: '3.0.2'
info:
  title: Photos API
  description: 'photos.gkrupp.hu'
  version: '0.1.0'
servers:
  - url: https://photos-api.gkrupp.hu


components:
  parameters:
    photoId:
      name: photoId
      in: path
      required: true
      description: Unique identifier of a photo
      schema:
        type: string
        minLength: 128
        maxLength: 128
    albumId:
      name: albumId
      in: path
      required: true
      description: Unique identifier of an album
      schema:
        type: string
        minLength: 64
        maxLength: 64
    userId:
      name: userId
      in: path
      required: true
      description: Unique identifier of a user
      schema:
        type: string
        minLength: 32
        maxLength: 32
    includeId:
      name: includeId
      in: query
      required: false
      description: Include `id` field
      schema:
        type: boolean
        default: false
    details:
      name: details
      in: query
      required: false
      description: Metadata details
      schema:
        type: string
        default: default
        enum:
          - minimal
          - default
          - all
    width:
      name: width
      in: query
      required: false
      description: Photo width
      schema:
        type: number
        default: 1600
    height:
      name: height
      in: query
      required: false
      description: Photo height
      schema:
        type: number
        default: 1200
    fit:
      name: fit
      in: query
      required: false
      description: Photo resize fit schema
      schema:
        type: string
        default: cover
        enum:
          - cover
          - contain
          - fill
          - inside
          - outside
    position:
      name: position
      in: query
      required: false
      description: Photo resize crop positioning schema
      schema:
        type: string
        default: center
        enum:
          - center
          - top
          - right top
          - right
          - right bottom
          - bottom
          - left bottom
          - left
          - left top
    skip:
      name: skip
      in: query
      required: false
      description: Pagination offset
      schema:
        type: number
        default: 0
    albumlimit:
      name: limit
      in: query
      required: false
      description: Pagination limit
      schema:
        type: number
        default: 100
        maximum: 200
    photolimit:
      name: limit
      in: query
      required: false
      description: Pagination limit
      schema:
        type: number
        default: 100
        maximum: 200
  responses:
    PhotoFile:
      description: PhotoFile
      content:
        image/*:
          schema:
            type: string
            format: binary
    AlbumFile:
      description: AlbumFile
      content:
        application/zip:
          schema:
            type: string
            format: binary


tags:
  - name: content
    description: Content API
  - name: photo
    description: Photo Meta API
  - name: album
    description: Album Meta API
  - name: user
    description: User Meta API
  - name: view
    description: View API


paths:

  
  /content/photo/{id}:
    get:
      tags:
        - content
      summary: Serves photo by ID
      description: Serves a photo file referenced by its ID
      operationId: contentPhotoId
      parameters:
      - $ref: '#/components/parameters/photoId'
      - $ref: '#/components/parameters/width'
      - $ref: '#/components/parameters/height'
      - $ref: '#/components/parameters/fit'
      - $ref: '#/components/parameters/position'
      responses:
        200:
          $ref: '#/components/responses/PhotoFile'
        400:
          description: Malformed {photoId}
        404:
          description: Photo not found
  
  /content/album/{id}:
    get:
      tags:
        - content
      summary: Serves album content by ID
      description: Serves the zipped content of an album referenced by its ID
      operationId: contentAlbumId
      parameters:
      - $ref: '#/components/parameters/albumId'
      responses:
        200:
          $ref: '#/components/responses/AlbumFile'
        400:
          description: Malformed {albumId}
        404:
          description: Album not found


  /photo/{id}:
    get:
      tags:
        - photo
      summary: Photo metadata by ID
      description: Return a photo's metadata referenced by its ID
      operationId: photoId
      parameters:
      - $ref: '#/components/parameters/photoId'
      - $ref: '#/components/parameters/details'
      - $ref: '#/components/parameters/includeId'
      responses:
        200:
          description: Photo object
        400:
          description: Malformed {photoId}
        404:
          description: Photo not found
  
  /photo/in/{albumId}:
    get:
      tags:
        - photo
      summary: Photos metadata by parent album
      description: Returns photos' metadata referenced by their {albumId}
      operationId: photosByAlbumId
      parameters:
      - $ref: '#/components/parameters/albumId'
      - $ref: '#/components/parameters/details'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/photolimit'
      responses:
        200:
          description: Array of Photo object
        400:
          description: Malformed {albumId}


  /album/{id}:
    get:
      tags:
        - album
      summary: Album metadata by ID
      description: Returns an album's metadata referenced by its ID
      operationId: albumId
      parameters:
      - $ref: '#/components/parameters/albumId'
      - $ref: '#/components/parameters/details'
      - $ref: '#/components/parameters/includeId'
      responses:
        200:
          description: Album object
        400:
          description: Malformed {albumId}
        404:
          description: Album not found
  
  /album/in/{albumId}:
    get:
      tags:
        - album
      summary: Albums metadata by parent album
      description: Returns albums' metadata referenced by their {albumId}
      operationId: albumsByAlbumId
      parameters:
      - $ref: '#/components/parameters/albumId'
      - $ref: '#/components/parameters/details'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/albumlimit'
      responses:
        200:
          description: Array of Album object
        400:
          description: Malformed {albumId}
  
  
  /user/{userId}:
    get:
      tags:
        - user
      summary: User metadata by ID
      description: Returns an user's metadata referenced by its ID
      operationId: userId
      parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/details'
      - $ref: '#/components/parameters/includeId'
      responses:
        200:
          description: User object
        400:
          description: Malformed {userId}
        404:
          description: User not found
  
  
  /view/album/{albumId}:
    get:
      tags:
        - view
      summary: Combined album view by ID
      description: Returns albums, photos and users in an album
      operationId: viewAlbum
      parameters:
      - $ref: '#/components/parameters/albumId'
      - $ref: '#/components/parameters/details'
      - $ref: '#/components/parameters/skip'
      responses:
        200:
          description: Combined {albums,photos,users} object
        400:
          description: Malformed {albumId}
        404:
          description: Album not found
